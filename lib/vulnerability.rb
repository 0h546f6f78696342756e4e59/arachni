=begin
  $Id$

                  Arachni
  Copyright (c) 2010 Anastasios Laskos <tasos.laskos@gmail.com>

  This is free software; you can copy and distribute and modify
  this program under the term of the GPL v2.0 License
  (See LICENSE file for details)

=end


#
# Vulnerability class.
# 
# It represents a detected vulnerability.
#
#
# @author: Anastasios "Zapotek" Laskos
#                                      <tasos.laskos@gmail.com>
#                                      <zapotek@segfault.gr>
# @version: $Rev$
#
module Arachni

class Vulnerability

    #
    # The name of the vulnerability
    #
    # @return    [String]
    #
    attr_accessor :name
        
    #
    # The module that detected the vulnerability
    #
    # @return    [String]    the name of the module
    #
    attr_accessor :mod_name
        
    #
    # The vulnerable HTTP variable
    #
    # @return    [String]    the name of the http variable
    #
    attr_accessor :var
    
    #
    # The vulnerable URL
    #
    # @return    [String]
    #
    attr_accessor :url
    
    #
    # The headers exchanhed during the attack
    #
    # @return [Hash<String, Hash>]  request and reply headers
    #
    attr_accessor :headers

    #
    # The HTML response of the attack
    #
    # @return [String]  the html response of the attack
    #
    attr_accessor :response
    
    #
    # The injected data that revealed the vulnerability
    #
    # @return    [String]
    #
    attr_accessor :injected
    
    #
    # The string that identified the vulnerability
    #
    # @return    [String]
    #
    attr_accessor :id
    
    #
    # The regexp that identified the vulnerability
    #
    # @return    [String]
    #
    attr_accessor :regexp
    
    #
    # The data that was matched by the regexp
    #
    # @return    [String]
    #
    attr_accessor :regexp_match
    
    #
    # The vulnerable element, link, form or cookie
    #
    # @return    [String]
    #
    attr_accessor :elem
    
    #
    # The description of the vulnerability
    #
    # @return    [String]
    #
    attr_accessor :description
    
    #
    # References related to the vulnerability
    #
    # @return    [Hash]
    #
    attr_accessor :references
    
    #
    # The CWE ID number of the vulnerability
    #
    # @return    [String]
    #
    attr_accessor :cwe
    
    #
    # The CWE URL of the vulnerability
    #
    # @return    [String]
    #
    attr_accessor :cwe_url
    
    #
    # High, Medium, Low
    #
    # @return    [String]
    #
    attr_accessor :severity
    
    #
    # The CVSS v2 score
    #
    # @return    [String]
    #
    attr_accessor :cvssv2
    
    #
    # A brief text informing the user how to remedy the situation
    #
    # @return    [String]
    #
    attr_accessor :remedy_guidance
    
    #
    # A code snipet showing the user how to remedy the situation
    #
    # @return    [String]
    #
    attr_accessor :remedy_code

    #
    # Sets up the instanse attributes
    #
    # @param    Hash    cofiguration hash
    #                     Usually the returned data of a module's
    #                     info() method for the references
    #                     merged with a name=>value pair hash holding
    #                     class attributes
    #
    def initialize( opts = {} )
        
        opts.each {
            |k, v|
            begin
                send( "#{k.downcase}=", v )
            rescue Exception => e
            end
        }
        
        opts['Vulnerability'].each {
            |k, v|
            begin
                send( "#{k.downcase}=", v )
            rescue Exception => e
            end
        }
        
        if( @cwe )
            @cwe_url = "http://cwe.mitre.org/data/definitions/" + @cwe + ".html"
        end
        
        @mod_name   = opts['Name']
        @references = opts['References']

    end
    
    def each
        self.instance_variables.each {
            |var|
            yield( { normalize_name( var ) => instance_variable_get( var ) } )  
        }
    end
    
    def each_pair
        self.instance_variables.each {
            |var|
            yield normalize_name( var ), instance_variable_get( var ) 
        }
    end
    
    private
    
    def normalize_name( name )
        name.to_s.gsub( /@/, '' )
    end
    

end

end
